[ View 환경설정 ]
Welcome 페이지 만들기 (도메인만 쳤을 때 나오는 페이지)
Main/resources/static/index.html

Spring.io -> Projects -> SpringBoot -> Learn ->> Reference 가서 -> Spring Boot Features

https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.welcome-page

7.1.6. Welcome Page
Spring Boot는 static, templated 두 방식 모두 사용 가능
찾는 순서 1) static 위치의 index.html 2) index template 3) 애플리케이션의 welcome page를 자동으로 사용함

? template는 어디있음?
? 1,2에 말고 Welcome page 넣는 곳이 있음?


* 현재 스프링 버전 확인?
### build.gradle 
plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}


index.html(static)은 그냥 파일 만들어서 던져주는 방식임
-> Thymeleaf 템플릿 엔진을 활용 해보자

7.1.10. Template Engines
Spring Boot에서 auto-configuration 지원하는 템플릿 엔진 4개 -> 중 하나가 Thymeleaf

* 컨트롤러 : 웹 애플리케이션 첫번째 진입점
Main/java/hello/hellospring/controller/HelloController class 생성
@Controller 필요

* Cannot resolve symbol 'attributeName' —> “data” 치면 앞에이름은 자동생성됨. 직접치지마라

- Resources/templates/hello.html 생성
- 동작 흐름 : Web Browser에서 Url 입력(요청) -> 내장 톰캣서버 -> Controller -> View Resolver -> template 엔진 처리해서 -> Web Browser

[ 빌드하고 실행하기 ]
내 프로젝트 위치 —> 
./gradlew build
필요한 라이브러리 받고 빌드가 됨

java -jar build/libs/hello-spring-0.0.1-SNAPSHOT.jar하면 inteliJ에서 실행한 것 처럼 아웃풋 뜨고 서버 실행됨
서버 배포할땐 이 jar 만 배포해서 java -jar 로 실행하면 됨
(톰캣 설치해서 뭐 만들어서 집어넣고 이런거 안해도됨)

* 빌드 잘 안되면 ./gradlew clean build —> 기존 build 지우고 새로 빌드함


* Build : 소스코드 파일을 실행 가능한 소프트웨어 산출물로 만드는 일련의 과정. 컴파일 단계 포함.
* Compile : 소스코드 -> 바이너리 코드(기계어)로 변환 (산출물 : 목적파일). 자바의 경우 JVM에서 실행 가능한 바이트코드 형태의 클래스 파일이 생성됨
* link : 컴파일한 결과물들에서 최종 실행가능 파일 만들기 위해 소스파일끼리 연결하는 작업. (다른 소스파일에 존재하는 함수 등..)
   - static link : 컴파일 타임에. 컴파일 된 소스파일 연결
   - dynamic link : 런타임에. 실행 도중 찾아서 연결

=====================================
스프링 웹 개발 기초

크게 3가지 방식
1. 정적 컨텐츠 : 파일 -> 그대로 브라우저로
2. MVC와 템플릿 엔진 : html을 서버에서 동적으로 바꿔서 주는거. Model+View+Controller 패턴.
3. API : 정해진 포맷으로 클라이언트에 전달 (요즘엔 json). 서버끼리 할 때도 이용 

### Controller/HelloController.class


[ 정적 컨텐츠 ]
https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.static-content
- 기본 위치 : resources/static
- 웹 브라우저 -> ocalhost:8080/hello-stratic.html -> 파일 내용 그대로 보여줌
- 동작 흐름 : 웹 브라우저 -> 스프링 컨테이너에서 컨트롤러 찾음 hello-static 관련 컨트롤러 없음 -> resources: static/hello-static.html 찾았다 -> 브라우저로 보내줌


[ MVC와 템플릿 엔진 ]
* 과거 model one? 방식 : view 안에서 다 함
MVC 
- Model : 데이터?
- View : 화면 그리는 코드 (템플릿에 해당)
- Controller : 비즈니스 로직, 내부 처리

파라미터 정보 커맨드+P

url에 파라미터 입력해서 넘기기 (GET)


[ API ]
컨트롤러에서
@GetMapping(“hello-api”)
@ResponseBody
-> html body 부분에 return 내용 직접 넣어 보내겠다
-> 리턴 타입 String이 아닌 Hello 클래스

Controller 클래스 안에 static class Hello 만들기
컨트롤+N -> Getter & setter 만들기

- 동작 흐름 : 웹 브라우저 -> 스프링 컨테이너 내부의 helloController -> return 하는데 @ResponseBody 애노테이션 확인 
  -> 객체를 리턴(Hello) -> HttpMessageConverter 로 전달 -> JsonConverter가 리턴된 객체를 json 스타일로 변형 / 기본 문자열이면 StringConverter
  -> 요청한 브라우저나 서버에 보냄(응답)
* 기본 문자처리 : StringHttpMessageConverter (이게 작동하도록 스프링에 설정되어있음)
* 기본 객체처리 : MappingJackson2HttpMessageConverter (json->객체. 다른 컨버터 라이브러리도 있지만 spring이 기본으로 탑재함)
* byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있음
(템플릿처럼 view resolver가 작동하지 않음)

* 클라이언트의 HTTP Accept 헤더 + 서버 컨트롤러 리턴 타입 정보 조합해서 HttpMessageConverter가 선택된다.


=====================================
[ 회원 도메인과 리포지토리 만들기 ]
### domain/Member.java
- Member class 생성
### repository/MemberRepository.java
- DB가 정해지지 않은 상황을 가정했으므로, 어느 DB로 정해져도 적용 가능하도록 interface 생성


Java8
- Optional
- Lamda
- Assertions

[ 회원 리포지토리 테스트 케이스 작성 ]
Main 으로 실행하는 것은 준비, 실행 시간이 오래걸리고 반복해서 실행하기 어렵다
자바는 JUnit이라는 프레임 워크로 테스트를 실행할 수 있다

src/test/java 에 main 쪽에 생성했던 리포지토리 구조 만들어줌
main에서 java파일 이름 + test

### src/test/java/OneStep/hellospring/repository/MemoryMemberRepositoryTest

@Test

값 비교 Assertions 로 비교 시 출력은 없지만 run 했을 때 build output에 결과 보임
Assertions.assertEquals("무야호", result);	// org.junit
값 다를 경우 -> 
org.opentest4j.AssertionFailedError: 
Expected :무야호
Actual   :OneStep.hellospring.domain.Member@662ac478

Assertions.assertThat(member).isEqualTo(result);    // org.assertj
* Assertions는 static이라서 option+enter 하면 add on-demand 어쩌구.. -> import시켜서 바로쓸수있음

* test run 했는데 없다고 에러 뜸 > No tests found for given includes
  —> Preferences > Build, Exception, Deployment > Build Tools > Gradle > Run tests using > IntelliJ IDE 로 변경 (Gradle로 되어있었음)

Test클래스에서 전체 한번에 돌리면 각 @Test의 실행 순서 보장이 안됨. (실행순서랜덤)
Name 겹치게 추가해둔 member가 있어서 findByName() 테스트가 실패함
-> 각 @Test 의 의존성을 없애주기 위해 매 테스트 마다 Repository를 클리어 한다

@AfterEach	// @Test 끝날 때 마다 실행
public void afterEach(){
    repository.clearStore();	// interface에 헤더, class 구현부에 채워져있어야함
}


* TDD : Test 주도 개발. 테스트를 먼저 만들고 거기에 맞게 main 구현

* 프로젝트 커지고 사람 많아지면 테스트가 필수임 잘 알아둬야함

================================
[ 스프링 빈과 의존관계 ]
스프링 빈을 등록하고, 의존관계 설정하기

- 컨트롤러가 MemberService를 의존한다 => MemberService 이용해서 조회하고 등등 동작함
- spring 실행하면 생성되는 spring container 가 같이 생성하고 관리
  spring container가 bean을 관리한다 
@Controller	--> 외부 로직 받고
  @AutoWired
@Service	--> 비즈니스 로직
@Repository	--> 데이터 관리

(( controller/MemberController.java ))
@Controller 	// 이 애노테이션 -> 스프링 컨테이너가 만들어질 때 이게 붙은 녀석은 객체를 만들어둔다 (여기선 MemberController 객체)
public class MemberController {

	// 1번 방법) 이렇게 사용하면 MemberController 마다 새로 생성됨. 전체 프로그램에서 딱 하나만 생성해서 사용하면 되는데?
	// private final MemberService memberService = new Service();

	// 2번 방법) 그래서 생성자로 넣어주기로 했다
	private final MemberService memberService;

	@Autowired	// spring container가 연결 해줌...설명좀 자세히좀... 
	public MemberController(MemberService ms){
		this.memberService = ms;
	}
	// 그런데 이렇게 하면 실행 안됨. (Could not be found)
	// @Autowired붙은 애가 필요한 MemberService는 그저 순수 java 코드임. spring이 MemberService 갖다 관리하지 않음.
	// ==> MemberService.java 가서 @Service 붙이면 됨. 
	//     MemberServiced의 생성자에 @Autowired 붙이고 MembeoryMemberRepository.java에도 @Repository 붙여주기
}

Controller - Service 연결이 필요해서 @Autowired 사용.
생성자에 @Autowired 가 되어있으면 MemberController 생성될 때 
스프링 빈에 등록되어있는 MemberService 객체 가져다 넣어줌

Spring Container 내부
[ Controller -> Service -> Repository ]

### 스프링 빈 등록하는 방법
1) 컴포넌트 스캔과 자동 의존관계 설정 --> 위에서 한 방법
2) 자바 코드로 직접 스프링 빈 등록하기

@Service 코드 클릭해서 들어가면 @Component 가 포함되어 있음 (다른 애노테이션도 마찬가지)
@Component 애노테이션이 있으면 spring 객체로 만들어서 spring container에 등록함 (= 스프링 빈으로 자동 등록됨)

* 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때 기본으로 싱글으로 등록한다.
  => 같은 스프링 빈이면 모두 같은 인스턴스다. (설정으로 싱글톤 아니게 설정할 수 있지만 특별한 경우에만 함)
? 특별한 경우가 어떤 경우?
? 그럼 코드 상에서 새로 생성해서 못쓰는 것? 
? 코드 상에 받아오는걸 빼먹으면 빈 등록만 되고 실제로 갖다 쓰는 곳이 없는것..?


* DI (Dependency Injection)
  IOC Container가 개발자 대신 정의된 대로 Bean 객체를 생성하고 의존성을 대신 주입해준다.
  스프링은 이 방식으로 클래스간의 의존성을 줄일 수 있다. (결합도를 낮출 수 있다)
* IOC Container (Inversion of Control. Spring Container)
  사용자가 작성한 메타데이터(xml 파일 또는 애노테이션)에 따라 Bean 클래스를 생성, 관리하는 Spring의 핵심 컴포넌트
https://galid1.tistory.com/493?category=769011



