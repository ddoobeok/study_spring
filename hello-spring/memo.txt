[ View 환경설정 ]
Welcome 페이지 만들기 (도메인만 쳤을 때 나오는 페이지)
Main/resources/static/index.html

Spring.io -> Projects -> SpringBoot -> Learn ->> Reference 가서 -> Spring Boot Features

https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.welcome-page

7.1.6. Welcome Page
Spring Boot는 static, templated 두 방식 모두 사용 가능
찾는 순서 1) static 위치의 index.html 2) index template 3) 애플리케이션의 welcome page를 자동으로 사용함

? template는 어디있음?
? 1,2에 말고 Welcome page 넣는 곳이 있음?


* 현재 스프링 버전 확인?
### build.gradle 
plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}


index.html(static)은 그냥 파일 만들어서 던져주는 방식임
-> Thymeleaf 템플릿 엔진을 활용 해보자

7.1.10. Template Engines
Spring Boot에서 auto-configuration 지원하는 템플릿 엔진 4개 -> 중 하나가 Thymeleaf

* 컨트롤러 : 웹 애플리케이션 첫번째 진입점
Main/java/hello/hellospring/controller/HelloController class 생성
@Controller 필요

* Cannot resolve symbol 'attributeName' —> “data” 치면 앞에이름은 자동생성됨. 직접치지마라

- Resources/templates/hello.html 생성
- 동작 흐름 : Web Browser에서 Url 입력(요청) -> 내장 톰캣서버 -> Controller -> View Resolver -> template 엔진 처리해서 -> Web Browser

[ 빌드하고 실행하기 ]
내 프로젝트 위치 —> 
./gradlew build
필요한 라이브러리 받고 빌드가 됨

java -jar build/libs/hello-spring-0.0.1-SNAPSHOT.jar하면 inteliJ에서 실행한 것 처럼 아웃풋 뜨고 서버 실행됨
서버 배포할땐 이 jar 만 배포해서 java -jar 로 실행하면 됨
(톰캣 설치해서 뭐 만들어서 집어넣고 이런거 안해도됨)

* 빌드 잘 안되면 ./gradlew clean build —> 기존 build 지우고 새로 빌드함


* Build : 소스코드 파일을 실행 가능한 소프트웨어 산출물로 만드는 일련의 과정. 컴파일 단계 포함.
* Compile : 소스코드 -> 바이너리 코드(기계어)로 변환 (산출물 : 목적파일). 자바의 경우 JVM에서 실행 가능한 바이트코드 형태의 클래스 파일이 생성됨
* link : 컴파일한 결과물들에서 최종 실행가능 파일 만들기 위해 소스파일끼리 연결하는 작업. (다른 소스파일에 존재하는 함수 등..)
   - static link : 컴파일 타임에. 컴파일 된 소스파일 연결
   - dynamic link : 런타임에. 실행 도중 찾아서 연결

=====================================
스프링 웹 개발 기초

크게 3가지 방식
1. 정적 컨텐츠 : 파일 -> 그대로 브라우저로
2. MVC와 템플릿 엔진 : html을 서버에서 동적으로 바꿔서 주는거. Model+View+Controller 패턴.
3. API : 정해진 포맷으로 클라이언트에 전달 (요즘엔 json). 서버끼리 할 때도 이용 

### Controller/HelloController.class


[ 정적 컨텐츠 ]
https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.static-content
- 기본 위치 : resources/static
- 웹 브라우저 -> ocalhost:8080/hello-stratic.html -> 파일 내용 그대로 보여줌
- 동작 흐름 : 웹 브라우저 -> 스프링 컨테이너에서 컨트롤러 찾음 hello-static 관련 컨트롤러 없음 -> resources: static/hello-static.html 찾았다 -> 브라우저로 보내줌


[ MVC와 템플릿 엔진 ]
* 과거 model one? 방식 : view 안에서 다 함
MVC 
- Model : 데이터?
- View : 화면 그리는 코드 (템플릿에 해당)
- Controller : 비즈니스 로직, 내부 처리

파라미터 정보 커맨드+P

url에 파라미터 입력해서 넘기기 (GET)


[ API ]
컨트롤러에서
@GetMapping(“hello-api”)
@ResponseBody
-> html body 부분에 return 내용 직접 넣어 보내겠다
-> 리턴 타입 String이 아닌 Hello 클래스

Controller 클래스 안에 static class Hello 만들기
컨트롤+N -> Getter & setter 만들기

- 동작 흐름 : 웹 브라우저 -> 스프링 컨테이너 내부의 helloController -> return 하는데 @ResponseBody 애노테이션 확인 
  -> 객체를 리턴(Hello) -> HttpMessageConverter 로 전달 -> JsonConverter가 리턴된 객체를 json 스타일로 변형 / 기본 문자열이면 StringConverter
  -> 요청한 브라우저나 서버에 보냄(응답)
* 기본 문자처리 : StringHttpMessageConverter (이게 작동하도록 스프링에 설정되어있음)
* 기본 객체처리 : MappingJackson2HttpMessageConverter (json->객체. 다른 컨버터 라이브러리도 있지만 spring이 기본으로 탑재함)
* byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있음
(템플릿처럼 view resolver가 작동하지 않음)

* 클라이언트의 HTTP Accept 헤더 + 서버 컨트롤러 리턴 타입 정보 조합해서 HttpMessageConverter가 선택된다.

